// Blue/Green Deployment into Production
	  // -------------------------------------
	  def dest   = "tasks-green"
	  def active = ""
	
	  stage('Prep Production Deployment') {
	    // Replace xyz-tasks-dev and xyz-tasks-prod with
	    // your project names
	    sh "oc project xyz-tasks-prod"
	    sh "oc get route tasks -n xyz-tasks-prod -o jsonpath='{ .spec.to.name }' > activesvc.txt"
	    active = readFile('activesvc.txt').trim()
	    if (active == "tasks-green") {
	      dest = "tasks-blue"
	    }
	    echo "Active svc: " + active
	    echo "Dest svc:   " + dest
	  }
	  stage('Deploy new Version') {
	    echo "Deploying to ${dest}"
	
	    // Patch the DeploymentConfig so that it points to
	    // the latest ProdReady-${version} Image.
	    // Replace xyz-tasks-dev and xyz-tasks-prod with
	    // your project names.
	    sh "oc patch dc ${dest} --patch '{\"spec\": { \"triggers\": [ { \"type\": \"ImageChange\", \"imageChangeParams\": { \"containerNames\": [ \"$dest\" ], \"from\": { \"kind\": \"ImageStreamTag\", \"namespace\": \"xyz-tasks-dev\", \"name\": \"tasks:ProdReady-$version\"}}}]}}' -n xyz-tasks-prod"
	
	    openshiftDeploy depCfg: dest, namespace: 'xyz-tasks-prod', verbose: 'false', waitTime: '', waitUnit: 'sec'
	    openshiftVerifyDeployment depCfg: dest, namespace: 'xyz-tasks-prod', replicaCount: '1', verbose: 'false', verifyReplicaCount: 'true', waitTime: '', waitUnit: 'sec'
	    openshiftVerifyService namespace: 'xyz-tasks-prod', svcName: dest, verbose: 'false'
	  }
	  stage('Switch over to new Version') {
	    input "Switch Production?"
	
	    sh 'oc patch route tasks -n xyz-tasks-prod -p \'{"spec":{"to":{"name":"' + dest + '"}}}\''
	    sh 'oc get route tasks -n xyz-tasks-prod > oc_out.txt'
	    oc_out = readFile('oc_out.txt')
	    echo "Current route configuration: " + oc_out
	  }